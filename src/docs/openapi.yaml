openapi: "3.0.0"
info:
  version: 1.0.0
  title: MoMo API docs
  description: MoMo 프로젝트의 API 문서입니다
  license:
    name: MIT
servers:
  - description: production server
    url: https://momodiary.ga
  - description: master server
    url: http://3.36.79.14:3000
  - description: local server
    url: http://localhost:3000
schemas: [http, https]
consumes:
  - "application/json"
produces:
  - "application/json"
tags:
  - name: Users
    description: "Everything about Users"
  - name: Diaries
    description: "Everything about Diaries"
  - name: Sentences
    description: "Everything about Sentences"
  - name: Emotions
    description: "Everything about Emotions"
paths:
  /users/signup:
    get:
      summary: '이메일 중복확인(채원)'
      tags:
        - Users
      parameters:
        - in: query
          name: email
          schema:
            type: string
          required: true
          description: 중복 확인 할 이메일
      responses:
        '200':
          description: 'SUCCESS : 사용 가능한 이메일인 경우'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '사용 가능한 이메일입니다.'
        '400':
          description: 'FAIL : 중복된 이메일인 경우'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '사용 불가능한 이메일입니다.'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '이메일 중복 확인 실패'
                error: 'error && error.message'
    post:
      summary: '회원가입(채원)'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: 'SUCCESS : 회원가입 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '회원가입 성공'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/Users'
                      token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyLCJpYXQiOjE2MDk5MzcwMzgsImV4cCI6MTYxNzcxMzAzOCwiaXNzIjoibW9tbyJ9.Dp_5KpJ2wzCH4j-hBVgDAGmJDiS43RUKep6HjlQY6Ro'
        '400':
          description: 'FAIL : 중복된 이메일'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '사용 불가능한 이메일입니다.'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '회원가입 실패'
                error: 'error && error.message'                
  /users/signin:
    post:
      summary: '로그인(채원)'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: 'SUCCESS : 로그인 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '로그인 성공'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/Users'
                      token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyLCJpYXQiOjE2MDk5MzcwMzgsImV4cCI6MTYxNzcxMzAzOCwiaXNzIjoibW9tbyJ9.Dp_5KpJ2wzCH4j-hBVgDAGmJDiS43RUKep6HjlQY6Ro'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                '아이디 오류':
                  value:
                    message: '존재하지 않는 회원'
                '패스워드 오류':
                  value:
                    message: '비밀번호가 일치하지 않습니다'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '로그인 실패'
                error: 'error && error.message'
  /users/signin/social:
    post:
      summary: '소셜로그인(채원)'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                socialName:
                  type: string
                  description: 소셜 로그인 종류
                  example: kakao || google
                accessToken:
                  type: string
                  description: accessToken 값
                  
      responses:
        '200':
          description: 'SUCCESS : 로그인 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '로그인 성공'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/Users'
                      token:
                        type: string
                        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyLCJpYXQiOjE2MDk5MzcwMzgsImV4cCI6MTYxNzcxMzAzOCwiaXNzIjoibW9tbyJ9.Dp_5KpJ2wzCH4j-hBVgDAGmJDiS43RUKep6HjlQY6Ro'
        '400':
          description: 'FAIL : accessToken값 오류'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '잘못된 토큰'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '로그인 실패'
                error: 'error && error.message'
  /users:
    get:
      security:
        - api_key: []
      summary: '회원전체조회(영현)'
      tags:
        - Users
      responses:
        '200':
          description: 'SUCCESS : 회원 전체 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '회원 전체 조회 성공'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Users'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '회원 전체 조회 실패'
                error: 'error && error.message'
  /users/{id}:
    get:
      security:
        - api_key: []
      summary: '회원 조회(영현)'
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: user 고유 id
      responses:
        '200':
          description: 'SUCCESS: 회원 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '회원 조회 성공'
                  data:
                    $ref: '#/components/schemas/Users'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id값 오류':
                  value:
                    message: '존재하지 않는 회원'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '회원 조회 실패'
                error: 'error && error.message'
    delete:
      security:
        - api_key: []
      summary: '회원 탈퇴(영현)'
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: user 고유 id
      responses:
        '200':
          description: 'SUCCESS: 회원 삭제 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '회원 삭제 성공'
                  data:
                    $ref: '#/components/schemas/Users'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id값 오류':
                  value:
                    message: '존재하지 않는 회원'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '회원 삭제 실패'
                error: 'error && error.message'
  /users/{id}/alarm:
    put:
      security:
        - api_key: []
      summary: '알람 변경(영현)'
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: user 고유 id
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  isAlarmSet:
                    type: boolean
                  alarmTime:
                    type: string
            examples:
              알람 on/off:
                summary: '알람 on/off 변경하는 경우'
                value:
                  isAlarmSet: true
              알람 시간 설정:
                summary: '알람 시간 설정 및 변경하는 경우'
                value:
                  isAlarmSet: true
                  alarmTime: "06:00"
      responses:
        '200':
          description: 'SUCCESS : 알람 수정 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '알람 수정 성공'
                  data:
                    type: object
                    properties:
                      isAlarmSet:
                        type: boolean
                        example: true
                      alarmTime:
                        type: string
                        example: null
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id값 오류':
                  value:
                    message: '존재하지 않는 회원'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '알람 수정 실패'
                error: 'error && error.message'
  /users/{id}/password:
    put:
      security:
        - api_key: []
      summary: '비밀번호 변경(영현)'
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: user 고유 id
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  newPassword:
                    type: string
            example:
                newPassword: "새로운 비밀번호"
      responses:
        '200':
          description: 'SUCCESS: 비밀번호 수정 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '비밀번호 수정 성공'
                  data:
                    $ref: '#/components/schemas/Users'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id값 오류':
                  value:
                    message: '존재하지 않는 회원'
                '현재 비밀번호와 같은 값을 입력한 경우':
                  value:
                    message: '현재 비밀번호와 새로운 비밀번호가 동일합니다'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '비밀번호 수정 실패'
                error: 'error && error.message'
    post:
      security:
        - api_key: []
      summary: '비밀번호 확인(영현)'
      tags:
        - Users
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: user 고유 id
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  newPassword:
                    type: string
            example:
                password: "현재 비밀번호"
      responses:
        '200':
          description: 'SUCCESS: 비밀번호 일치'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '비밀번호가 일치합니다'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id값 오류':
                  value:
                    message: '존재하지 않는 회원'
                'password 입력 오류':
                  value:
                    message: '비밀번호가 일치하지 않습니다'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '서버 내부 오류'
                error: 'error && error.message'
  /users/password/temp:
    post:
      security:
        - api_key: []
      summary: '임시비밀번호 발급(채원)'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  email:
                    type: string
            example:
                email: 'chaeppy108@gmail.com'
      responses:
        '200':
          description: 'SUCCESS: 임시비밀번호 생성 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '임시 비밀번호 생성 성공'
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        example: 'chaeppy108@gmail.com'
                      tempPasswordIssueCount:
                        type: integer
                        example: 1
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'email 입력 오류':
                  value:
                    message: '존재하지 않는 회원'
                '임시비밀번호 발급 횟수 초과':
                  value:
                    message: '임시비밀번호 발급 횟수 초과'
        '500' :
          description: 'FAIL : 서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '임시비밀번호 생성 실패'
                error: 'error && error.message'
  /diaries:
    post:
      security:
        - api_key: []
      summary: '일기 생성(영우)'
      tags:
        - Diaries
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  depth:
                    type: integer
                  contents:
                    type: string
                  userId:
                    type: integer
                  sentenceId:
                    type: integer
                  emotionId:
                    type: integer
                  wroteAt:
                    type: date-time
            example:
              contents: 'test_contents_0'
              depth: 3
              userId: 8,
              sentenceId: 40,
              emotionId: 3,
              wroteAt: "2020-08-16"
      responses:
        '201':
          description: 'SUCCESS: 일기 생성 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '일기 생성 성공'
                  data:
                    $ref: '#/components/schemas/Diaries'
        '401':
          description: 'FAIL : userId != 토큰 정보'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '일기 생성 실패'
                error: 'error && error.message'
    get:
      security:
        - api_key: []
      summary: '일기 전체 조회 및  깊이 / 필터별 조회(영우)'
      tags:
        - Diaries
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          example: 1
          description: user 고유 id
        - in: query
          name: year
          schema:
            type: string
          required: true
          example: "2020"
          description: 조회 할 년도
        - in: query
          name: month
          schema:
            type: string
          required: true
          example: "11"
          description: 조회 할 월
        - in: query
          name: order
          schema:
            type: string
          examples:
            depth:
              summary: 깊이별 조회
              value: depth
            filter:
              summary: 필터별 조회
              value: filter
          description: 조회 기준(깊이 / 필터별 조회 때 사용)
        - in: query
          name: day
          schema:
            type: string
          required: false
          description: 조회 할 일(필터별 조회 때 사용)
        - in: query
          name: emotionId
          schema:
            type: string
          required: false
          example: 1
          description: 감정 고유 id(필터별 조회 때 사용)
        - in: query
          name: depth
          schema:
            type: string
          required: false
          example: 1
          description: 깊이 값(필터별 조회 때 사용)
      responses:
        '200':
          description: 'SUCCESS: 일기 전체 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '일기 전체 조회 성공'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DiariesWithSentencesAndEmotions'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                '입력 값 오류':
                  value:
                    message: 'Body 타입이 잘못 되었습니다.'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '일기 전체 조회 실패'
                error: 'error && error.message'
  /diaries/statistics:
    get:
      security:
        - api_key: []
      summary: '일기통계 조회(영우)'
      tags:
        - Diaries
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          example: 1
          description: user 고유 id
        - in: query
          name: year
          schema:
            type: string
          required: true
          example: "2020"
          description: 조회 할 년도
        - in: query
          name: month
          schema:
            type: string
          required: true
          example: "11"
          description: 조회 할 월
      responses:
        '200':
          description: 'SUCCESS: 일기통계 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '일기통계 조회 성공'
                  data:
                    type: object
                    properties:
                      emotionCounts: 
                        type: array
                        items:
                          properties:
                            id:
                              type: integer
                              example: 1
                            count:
                              type: integer
                              example: 5
                            Emotion.id:
                              type: integer
                              example: 1
                            Emotion.name:
                              type: string
                              example: '행복'
                            Emotion.createdAt:
                              type: date-time
                              example: '2021-01-10T14:39:10.000Z'
                            Emotion.updatedAt:
                              type: date-time
                              example: '2021-01-10T14:39:10.000Z'
                      depthCounts:
                        type: array
                        items: 
                          properties:
                            depth:
                              type: integer
                              example: 0
                            count:
                              type: integer
                              example: 4
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                '입력 값 오류':
                  value:
                    message: 'Body 타입이 잘못 되었습니다.'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '일기통계 조회 실패'
                error: 'error && error.message'
  /diaries/recent:
    get:
      security:
        - api_key: []
      summary: '일기 작성이 안된 가장 최근 날짜조회(영우)'
      tags:
        - Diaries
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: true
          example: 1
          description: user 고유 id
      responses:
        '200':
          description: 'SUCCESS: 일기 최근 미작성 날짜 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '일기 최근 미작성 날짜 조회 성공'
                  data:
                    $ref: '#/components/schemas/Diaries'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '일기 조회 실패'
                error: 'error && error.message'
  /diaries/{id}:
    get:
      security:
        - api_key: []
      summary: '일기 조회(영우)'
      tags:
        - Diaries
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 1
          description: 일기 고유 id
      responses:
        '200':
          description: 'SUCCESS: 일기 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '일기 조회 성공'
                  data:
                    $ref: '#/components/schemas/DiariesWithSentencesAndEmotions'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id 값 오류':
                  value:
                    message: '존재하지 않는 일기'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '일기 조회 실패'
                error: 'error && error.message'
    put:
      security:
        - api_key: []
      summary: '일기 수정(영우)'
      tags:
        - Diaries
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 1
          description: 일기 고유 id
      requestBody:
        description: '변경된 속성만 넣어주면 됩니다!'
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  depth:
                    type: integer
                  contents:
                    type: string
                  userId:
                    type: integer
                  sentenceId:
                    type: integer
                  emotionId:
                    type: integer
                  wroteAt:
                    type: date-time
            example:
              depth: 3
              contents: 'test_contents_0'
              userId: 8,
              sentenceId: 40,
              emotionId: 7,
              wroteAt: "2020-08-16"
      responses:
        '200':
          description: 'SUCCESS: 일기 수정 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '일기 수정 성공'
                  data:
                    $ref: '#/components/schemas/DiariesWithSentencesAndEmotions'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id 값 오류':
                  value:
                    message: '존재하지 않는 일기'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '일기 수정 실패'
                error: 'error && error.message'
    delete:
      security:
        - api_key: []
      summary: '다이어리 삭제(영우)'
      tags:
        - Diaries
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 1
          description: 다이어리 고유 id
      responses:
        '200':
          description: 'SUCCESS: 다이어리 삭제 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '일기 삭제 성공'
                  data:
                    $ref: '#/components/schemas/DiariesWithSentencesAndEmotions'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id 값 오류':
                  value:
                    message: '존재하지 않는 일기'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '일기 삭제 실패'
                error: 'error && error.message'
  /sentences:
    post:
      summary: '문장 등록(영현)'
      tags:
        - Sentences
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object
                properties:
                  contents:
                    type: string
                  bookName:
                    type: string
                  writer:
                    type: string
                  publisher:
                    type: string
                  emotion:
                    type: array
            example:
              contents: '문장 내용'
              bookName: '책 이름'
              writer: '저자명'
              publisher: "출판사명"
              emotion: ['사랑', '행복']
      responses:
        '201':
          description: 'SUCCESS: 문장 생성 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '문장 생성 성공'
                  data:
                    $ref: '#/components/schemas/Sentences'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'requestBody값 입력없는 경우':
                  value:
                    message: '필요한 값이 없습니다'
                'emotion값 오류':
                  value:
                    message: '감정 조회 실패'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '문장 생성 실패'
                error: 'error && error.message'
    get:
      security:
        - api_key: []
      summary: '문장 조회(영현)'
      tags:
        - Sentences
      parameters:
        - in: query
          name: emotionId
          schema:
            type: string
          required: true
          example: 1
          description: emotion 고유 id
        - in: query
          name: userId
          schema:
            type: string
          required: true
          example: 1
          description: user 고유 id
      responses:
        '200':
          description: 'SUCCESS: 문장 조회 성공(문장 3개)'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '문장 조회 성공'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Sentences'
        '400':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'id값 오류':
                  value:
                    message: '존재하지 않는 회원'
        '401':
          description: 'FAIL : 잘못된 요청'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                'userId != 토큰 정보':
                  value:
                    message: '권한이 없습니다'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '문장 조회 실패'
                error: 'error && error.message'
  /sentences/onboarding:
    get:
      summary: '온보딩 문장 조회(영현)'
      tags:
        - Sentences
      parameters:
        - in: query
          name: emotionId
          schema:
            type: string
          required: true
          example: 1
          description: emotion 고유 id
      responses:
        '200':
          description: 'SUCCESS: 온보딩문장 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '온보딩문장 조회 성공'
                  data:
                    type: object
                    properties:
                      emotionId:
                        type: integer
                        example: 1
                      sentence_01:
                        type: object
                        properties:
                          contents:
                            type: string
                            example: '문장 내용'
                          bookName:
                            type: string
                            example: '책 제목'
                          writer:
                            type: string
                            example: '저자명'
                          publisher:
                            type: string
                            example: '출판사'
                      sentence_02:
                        type: object
                        properties:
                          contents:
                            type: string
                            example: '문장 내용'
                          bookName:
                            type: string
                            example: '책 제목'
                          writer:
                            type: string
                            example: '저자명'
                          publisher:
                            type: string
                            example: '출판사'
                      sentence_03:
                        type: object
                        properties:
                          contents:
                            type: string
                            example: '문장 내용'
                          bookName:
                            type: string
                            example: '책 제목'
                          writer:
                            type: string
                            example: '저자명'
                          publisher:
                            type: string
                            example: '출판사'
        '400':
          description: 'FAIL : emotionId 값 입력없는 경우'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: 'emotionId must be a `number` type, but the final value was: `NaN` (cast from the value `\"\"`).'
  /emotions:
    get:
      security:
        - api_key: []
      summary: '감정 전체 조회(영현)'
      tags:
        - Emotions
      responses:
        '200':
          description: 'SUCCESS: 감정 전체 조회 성공'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: '감정 전체 조회 성공'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Emotions'
        '500' :
          description: '서버 내부 에러'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: '감정 전체 조회 실패'
                error: 'error && error.message'
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: authorization
      in: header
  schemas:
    Users:
      type: object
      required:
        - id
        - email
        - password
        - passwordSalt
      properties:
        id:
          type: number
          description: user 고유 id
        email:
          type: string
          description: 이메일
        password:
          type: string
          description: 비밀번호
        passwordSalt:
          type: string
          description: 비밀번호 salt 값
        isAlarmSet: 
          type: boolean
          description: 알람 설정 값
        alarmTime:
          type: time
          description: 알람 설정 시간
        tempPassword:
          type: string
          description: 임시 비밀번호
        tempPasswordCreatedAt:
          type: date-time
          description: 임시 비밀번호가 생성된 시점
        tempPasswordIssueCount:
          type: number
          description: 임시 비밀번호 시도 횟수
        createdAt:
          type: date-time
          description: 해당 데이터가 생성된 시점
        updatedAt:
          type: date-time
          description: 해당 데이터가 변경된 시점
    Emotions:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: number
          description: emotion 고유 id
        name:
          type: string
          description: 감정 이름
        createdAt:
          type: date-time
          description: 해당 데이터가 생성된 시점
        updatedAt:
          type: date-time
          description: 해당 데이터가 변경된 시점
    Sentences:
      type: object
      required: ['id', 'contents', 'bookName', 'writer', 'publisher']
      properties:
        id: 
          type: number
          description: sentence 고유 id
        contents:
          type: string
          description: 문장 내용
        bookName:
          type: string
          description: 책 이름
        writer:
          type: string
          description: 저자명
        publisher:
          type: string
          description: 출판사
        createdAt:
          type: date-time
          description: 해당 데이터가 생성된 시점
        updatedAt:
          type: date-time
          description: 해당 데이터가 변경된 시점
    Diaries:
      type: object
      required: ['id', 'contents', 'position', 'depth', 'userId', 'sentenceId', 'emotionId', 'wroteAt']
      properties:
        id:
          type: number
          description: diary 고유 id
        contents:
          type: string
          description: 일기 내용
        depth:
          type: number
          description: 일기 깊이
        userId:
          type: number
          description: 일기를 작성한 user 고유 id
        sentenceId:
          type: number
          description: 일기에 사용된 sentence 고유 id
        emotionId:
          type: number
          description: 일기의 감정에 해당하는 emotion 고유 id
        wroteAt:
          type: date-time
          description: 일기 날짜
        position:
          type: number
          description: x 위치 값
        createdAt:
          type: date-time
          description: 해당 데이터가 생성된 시점
        updatedAt:
          type: date-time
          description: 해당 데이터가 변경된 시점
    Notifications:
      type: object
      required: ['id', 'deviceToken', 'userId']
      properties:
        id:
          type: number
          description: notification 고유 id
        deviceToken:
          type: string
          description: 기기 토큰 값 
        userId:
          type: number
          description: user 고유 id
        createdAt:
          type: date-time
          description: 해당 데이터가 생성된 시점
        updatedAt:
          type: date-time
          description: 해당 데이터가 변경된 시점
    UsersRecommendedSentences:
      type: object
      required: ['id', 'userId', 'sentenceId', 'emotionId']
      properties:
        id:
          type: number
          description: usersRecommendedSentences 고유 id
        userId:
          type: number
          description: user 고유 id
        sentenceId:
          type: number
          description: sentence 고유 id
        emotionId:
          type: number
          description: emotion 고유 id
        createdAt:
          type: date-time
          description: 해당 데이터가 생성된 시점
        updatedAt:
          type: date-time
          description: 해당 데이터가 변경된 시점
    EmotionsHaveSentences:
      type: object
      required: ['id', 'userId', 'sentenceId', 'emotionId']
      properties:
        id:
          type: number
          description: usersRecommendedSentences 고유 id
        sentenceId:
          type: number
          description: sentence 고유 id
        emotionId:
          type: number
          description: emotion 고유 id
        createdAt:
          type: date-time
          description: 해당 데이터가 생성된 시점
        updatedAt:
          type: date-time
          description: 해당 데이터가 변경된 시점
    DiariesWithSentencesAndEmotions:
      allOf:
        - $ref: '#/components/schemas/Diaries'
        - type: object
          properties:
            Sentence:
              $ref: '#/components/schemas/Sentences'
            Emotion:
              $ref: '#/components/schemas/Emotions'
    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
  responses:
    BadRequest:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: 잘못된 요청
    InternalServerError:
      description: 서버 에러
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: 서버 내부 오류
    DBError:
      description: 데이터베이스 에러
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: 데이터베이스 에러
    Unauthorized:
      description: 권한 없음
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: 권한 없음
